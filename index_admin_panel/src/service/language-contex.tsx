"use client"
import { createContext, useContext, useState, type ReactNode } from "react"

// Define language types
export const languages = {
  en: { code: "en", name: "English", flag: "üá¨üáß" },
  uz: { code: "uz", name: "O'zbek", flag: "üá∫üáø" },
  ru: { code: "ru", name: "–†—É—Å—Å–∫–∏–π", flag: "üá∑üá∫" },
} as const

type LanguageCode = keyof typeof languages

type LanguageContextType = {
  t: (key: string) => string
  currentLanguage: LanguageCode
  setLanguage: (lang: LanguageCode) => void
}

const LanguageContext = createContext<LanguageContextType | undefined>(undefined)

export const LanguageProvider = ({ children }: { children: ReactNode }) => {
  const [currentLanguage, setCurrentLanguage] = useState<LanguageCode>("uz")

  const t = (key: string) => {
    const translations: Record<LanguageCode, Record<string, string>> = {
      en: {
        products: "Products",
        orders: "Orders",
        categories: "Categories",
        website: "Website",
        title: "INTEX-MARKET.UZ",
        viewWebsite: "View Website",
        adminProfile: "Admin Profile",
        name: "Name",
        email: "Email",
        clientName: "Client Name",
        phone: "Phone",
        image: "Image",
        sizeDepth: "Size(m)/Depth(cm)",
        priceSum: "Price(sum)",
        address: "Address",
        time: "Time",
        actions: "Actions",
        search: "Search",
        ordersTab: "Orders",
        consultationsTab: "Consultations",
        noConsultations: "No consultations available yet.",
        addProduct: "Add Product",
        frame: "Frame",
        quantity: "Quantity",
        frameType: "Frame Type",
        inflatable: "Inflatable",
        depth: "Depth",
        productName: "Product Name",
        tall: "Tall",
        productDeleted: "Product successfully deleted!",
        productEdited: "Product successfully edited!",
        productAdded: "Product successfully added!", // Added translation
        confirmEditProductTitle: "Confirm Edit",
        confirmEditProductMessage: "Are you sure you want to edit this product?",
        confirmDeleteProductTitle: "Confirm Delete",
        confirmDeleteProductMessage: "Are you sure you want to delete this product? This action cannot be undone.",
        yes: "Yes",
        no: "No",
      },
      uz: {
        products: "Mahsulotlar",
        orders: "Buyurtmalar",
        categories: "Kategoriyalar",
        website: "Veb-sayt",
        title: "INTEX-MARKET.UZ",
        viewWebsite: "Veb-saytni ko'rish",
        adminProfile: "Admin Profili",
        name: "Ism",
        email: "Elektron pochta",
        clientName: "Mijoz nomi",
        phone: "Telefon",
        image: "Rasm",
        sizeDepth: "O'lcham(m)/Chuqurlik(sm)",
        priceSum: "Narxi(so'm)",
        address: "Manzil",
        time: "Vaqt",
        actions: "Harakatlar",
        search: "Qidirish",
        ordersTab: "Buyurtmalar",
        consultationsTab: "Konsultatsiyalar",
        noConsultations: "Hozircha konsultatsiyalar mavjud emas.",
        addProduct: "Mahsulot qo'shish",
        frame: "Ramka",
        quantity: "Miqdor",
        frameType: "Karkasli",
        inflatable: "Puflanadigan",
        depth: "Chuqurlik",
        productName: "Mahsulot nomi",
        tall: "Bo'yi",
        productDeleted: "Mahsulot muvaffaqiyatli o'chirildi!",
        productEdited: "Mahsulot muvaffaqiyatli o'zgartirildi!",
        productAdded: "Mahsulot muvaffaqiyatli qo'shildi!", // Added translation
        confirmEditProductTitle: "O'zgartirishni tasdiqlash",
        confirmEditProductMessage: "Ushbu mahsulotni o'zgartirmoqchimisiz?",
        confirmDeleteProductTitle: "O'chirishni tasdiqlash",
        confirmDeleteProductMessage: "Ushbu mahsulotni o'chirmoqchimisiz? Bu amalni bekor qilib bo'lmaydi.",
        yes: "Ha",
        no: "Yo'q",
      },
      ru: {
        products: "–ü—Ä–æ–¥—É–∫—Ç—ã",
        orders: "–ó–∞–∫–∞–∑—ã",
        categories: "–ö–∞—Ç–µ–≥–æ—Ä–∏–∏",
        website: "–í–µ–±-—Å–∞–π—Ç",
        title: "INTEX-MARKET.UZ",
        viewWebsite: "–ü—Ä–æ—Å–º–æ—Ç—Ä –≤–µ–±-—Å–∞–π—Ç–∞",
        adminProfile: "–ü—Ä–æ—Ñ–∏–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞",
        name: "–ò–º—è",
        email: "–≠–ª–µ–∫—Ç—Ä–æ–Ω–Ω–∞—è –ø–æ—á—Ç–∞",
        clientName: "–ò–º—è –∫–ª–∏–µ–Ω—Ç–∞",
        phone: "–¢–µ–ª–µ—Ñ–æ–Ω",
        image: "–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ",
        sizeDepth: "–†–∞–∑–º–µ—Ä(–º)/–ì–ª—É–±–∏–Ω–∞(—Å–º)",
        priceSum: "–¶–µ–Ω–∞(—Å—É–º)",
        address: "–ê–¥—Ä–µ—Å",
        time: "–í—Ä–µ–º—è",
        actions: "–î–µ–π—Å—Ç–≤–∏—è",
        search: "–ù–∞–π—Ç–∏",
        ordersTab: "–ó–∞–∫–∞–∑—ã",
        consultationsTab: "–ö–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–∏",
        noConsultations: "–ö–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–π –ø–æ–∫–∞ –Ω–µ—Ç.",
        addProduct: "–î–æ–±–∞–≤–∏—Ç—å –ø—Ä–æ–¥—É–∫—Ç",
        frame: "–†–∞–º–∫–∞",
        quantity: "–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ",
        frameType: "–ö–∞—Ä–∫–∞—Å–Ω—ã–µ",
        inflatable: "–ù–∞–¥—É–≤–Ω—ã–µ",
        depth: "–ì–ª—É–±–∏–Ω–∞",
        productName: "–ù–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–æ–¥—É–∫—Ç–∞",
        tall: "–í—ã—Å–æ—Ç–∞",
        productDeleted: "–ü—Ä–æ–¥—É–∫—Ç —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω!",
        productEdited: "–ü—Ä–æ–¥—É–∫—Ç —É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω–µ–Ω!",
        productAdded: "–ü—Ä–æ–¥—É–∫—Ç —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω!", // Added translation
        confirmEditProductTitle: "–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –∏–∑–º–µ–Ω–µ–Ω–∏–µ",
        confirmEditProductMessage: "–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å —ç—Ç–æ—Ç –ø—Ä–æ–¥—É–∫—Ç?",
        confirmDeleteProductTitle: "–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å —É–¥–∞–ª–µ–Ω–∏–µ",
        confirmDeleteProductMessage: "–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å —ç—Ç–æ—Ç –ø—Ä–æ–¥—É–∫—Ç? –≠—Ç–æ –¥–µ–π—Å—Ç–≤–∏–µ –Ω–µ–æ–±—Ä–∞—Ç–∏–º–æ.",
        yes: "–î–∞",
        no: "–ù–µ—Ç",
      },
    }
    return translations[currentLanguage][key] || key
  }

  return (
    <LanguageContext.Provider value={{ t, currentLanguage, setLanguage: setCurrentLanguage }}>
      {children}
    </LanguageContext.Provider>
  )
}

export const useLanguage = () => {
  const context = useContext(LanguageContext)
  if (context === undefined) {
    throw new Error("useLanguage must be used within a LanguageProvider")
  }
  return context
}
